@model CourseProject.Presentation.ViewModels.FormTemplateViewModels.FormTemplateDetailViewModel
<div class="container">
    <a asp-controller="Forms" asp-action="Create" asp-route-id="@Model.Id" class="btn btn-link">Create a form</a>
    <a asp-controller="Forms" asp-action="Index" asp-route-formTemplateId="@Model.Id" class="btn btn-link">Forms</a>

    <h2>@Model.Title</h2>

    <div class="mb-3">
        @if (!string.IsNullOrEmpty(Model.ImageUrl))
        {
            <img src="@Model.ImageUrl" alt="Image" class="img-thumbnail"/>
        }
    </div>

    <div class="mb-3">
        <strong>Description:</strong>
        <p>@Model.Description</p>
    </div>

    <div class="mb-3">
        <strong>Topic:</strong>
        <p>@Model.Topic.Name</p>
    </div>

    <div class="mb-3">
        <strong>Tags:</strong>
        <p>@string.Join(", ", Model.Tags.Select(t => t.Name))</p>
    </div>

    <div class="mb-3">
        <strong>Public:</strong>
        @if (Model.IsPublic)
        {
            <p>Yes</p>
        }
        else
        {
            <p>No</p>
            <strong>Allowed users:</strong>
            <p>@string.Join(", ", Model.AllowedUsers.Select(u => u.Name))</p>
        }
    </div>

    <div class="mb-3">
        <strong>Created By:</strong>
        <p>@Model.Creator.Name</p>
    </div>

    <div class="mb-3">
        <strong>Questions:</strong>
        <ul>
            @foreach (var question in Model.Questions.OrderBy(q => q.Order))
            {
                <li>
                    <strong>Title: @question.Title:</strong>
                    <br/>
                    <em>Description:</em>: @question.Description
                    <br/>
                    <em>Type:</em> @question.Type
                </li>
            }
        </ul>
    </div>

    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
    
    @if (User.Identity.IsAuthenticated)
    {
        <form id="commentForm">
            <input type="hidden" name="formTemplateId" value="@Model.Id" />
            <div class="form-group">
                <label for="commentText">Add Comment:</label>
                <textarea id="commentText" class="form-control" rows="3"></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    }
    else
    {
        <p>Please <a asp-controller="Account" asp-action="Login">log in</a> to add comments.</p>
    }

    <div class="mb-3">
        <strong>Comments:</strong>
        <ul id="commentsList">
            @foreach (var comment in Model.Comments)
            {
            <li>
                <strong>@comment.ApplicationUserName</strong> (@comment.CreatedAt.ToLocalTime()):<br/>
                @comment.Text
            </li>
            }
        </ul>
    </div>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/commentHub")
        .build();

    connection.on("ReceiveComment", function(userName, commentText) {
        const commentsList = document.getElementById("commentsList");
        const newComment = document.createElement("li");
        newComment.innerHTML = `<strong>${userName}</strong>: ${commentText}`;
        commentsList.appendChild(newComment);
    });

    connection.start().catch(function(err) {
        return console.error(err.toString());
    });

    document.getElementById("commentForm").addEventListener("submit", function(event) {
        event.preventDefault();
        const commentText = document.getElementById("commentText").value;
        const userName = '@User.Identity.Name'; 

        connection.invoke("SendComment", userName, commentText, "@Model.Id").catch(function(err) {
            return console.error(err.toString());
        });

        document.getElementById("commentText").value = ''; 
    });
</script>


