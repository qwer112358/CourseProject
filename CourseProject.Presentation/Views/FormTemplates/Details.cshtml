@model CourseProject.Presentation.ViewModels.FormTemplateViewModels.FormTemplateDetailViewModel
<div class="container mt-5">
    <div class="d-flex justify-content-between mb-4">
        <h2>@Model.Title</h2>
        <div>
            <a asp-controller="Forms" asp-action="Create" asp-route-id="@Model.Id" class="btn btn-primary">Create a form</a>
            <a asp-controller="Forms" asp-action="Index" asp-route-formTemplateId="@Model.Id" class="btn btn-link">Forms</a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.ImageUrl))
    {
    <div class="mb-4 text-center">
        <img src="@Model.ImageUrl" alt="Image" class="img-fluid img-thumbnail" />
    </div>
    }

    <div class="mb-4">
        <strong>Description:</strong>
        <p>@Model.Description</p>
    </div>

    <div class="mb-4">
        <strong>Topic:</strong>
        <p>@Model.Topic.Name</p>
    </div>

    <div class="mb-4">
        <strong>Tags:</strong>
        <p>@string.Join(", ", Model.Tags.Select(t => t.Name))</p>
    </div>

    <div class="mb-4">
        <strong>Public:</strong>
        <p>@(Model.IsPublic ? "Yes" : "No")</p>
        @if (!Model.IsPublic)
        {
        <strong>Allowed users:</strong>
        <p>@string.Join(", ", Model.AllowedUsers.Select(u => u.Name))</p>
        }
    </div>

    <div class="mb-4">
        <strong>Created By:</strong>
        <p>@Model.Creator.Name</p>
    </div>

    <div class="mb-4">
        <strong>Questions:</strong>
        <ul class="list-unstyled">
            @foreach (var question in Model.Questions.OrderBy(q => q.Order))
            {
            <li class="mb-3">
                <strong>Title: @question.Title</strong>
                <br />
                <em>Description:</em> @question.Description
                <br />
                <em>Type:</em> @question.Type
            </li>
            }
        </ul>
    </div>

    <a asp-action="Index" class="btn btn-secondary mb-4">Back to List</a>

    @if (User.Identity.IsAuthenticated)
    {
    <form id="commentForm" class="mb-4">
        <input type="hidden" name="formTemplateId" value="@Model.Id" />
        <div class="form-group">
            <label for="commentText">Add Comment:</label>
            <textarea id="commentText" class="form-control" rows="3"></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
    </form>
    }
    else
    {
    <p>Please <a asp-controller="Account" asp-action="Login">log in</a> to add comments.</p>
    }

    <div class="mb-4">
        <h5>Comments:</h5>
        <ul id="commentsList" class="list-unstyled">
            @foreach (var comment in Model.Comments)
            {
            <li class="media mb-3">
                <img src="https://www.gravatar.com/avatar/?d=mp&s=50" alt="User Avatar" class="mr-3 rounded-circle" />
                <div class="media-body">
                    <h6 class="mt-0 mb-1">@comment.ApplicationUserName</h6>
                    <small class="text-muted">@comment.CreatedAt.ToLocalTime()</small>
                    <p class="mb-1">@comment.Text</p>
                </div>
            </li>
            }
        </ul>
    </div>


</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.js"></script>

<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/commentHub")
        .build();

    connection.on("ReceiveComment", function(userName, commentText) {
        const commentsList = document.getElementById("commentsList");
        const newComment = document.createElement("li");
        newComment.className = "media mb-3"; 
        newComment.innerHTML = `
        <img src="https://www.gravatar.com/avatar/?d=mp&s=50" alt="User Avatar" class="mr-3 rounded-circle" />
        <div class="media-body">
            <h6 class="mt-0 mb-1">${userName}</h6>
            <small class="text-muted">${new Date().toLocaleString()}</small>
            <p class="mb-1">${commentText}</p>
        </div>
    `;

        commentsList.appendChild(newComment);
    });


    connection.start().catch(function(err) {
        return console.error(err.toString());
    });

    document.getElementById("commentForm").addEventListener("submit", function(event) {
        event.preventDefault();
        const commentText = document.getElementById("commentText").value;
        const userName = '@User.Identity.Name';

        connection.invoke("SendComment", userName, commentText, "@Model.Id").catch(function(err) {
            return console.error(err.toString());
        });

        document.getElementById("commentText").value = '';
    });
</script>
